{"/home/travis/build/npmtest/node-npmtest-snaplog/test.js":"/* istanbul instrument in package npmtest_snaplog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-snaplog/lib.npmtest_snaplog.js":"/* istanbul instrument in package npmtest_snaplog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_snaplog = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_snaplog = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-snaplog/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-snaplog && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_snaplog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_snaplog\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_snaplog.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_snaplog.rollup.js'] =\n            local.assetsDict['/assets.npmtest_snaplog.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_snaplog.__dirname + '/lib.npmtest_snaplog.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-snaplog/node_modules/snaplog/index.js":"'use strict';\n\nconst Snaplog = require('./lib/snaplog');\n\nmodule.exports = new Snaplog();\n","/home/travis/build/npmtest/node-npmtest-snaplog/node_modules/snaplog/lib/snaplog.js":"'use strict';\n\nconst util \t\t = require('util');\nconst moment \t = require('moment');\nconst _ \t \t = require('lodash');\nconst clc \t \t = require('cli-color');\nconst stackTrace = require('stack-trace');\nconst Progress \t = require('./progress');\n\n/**\n * Build a snaplog\n * @type {[type]}\n */\nmodule.exports = class Snaplog {\n\n\tconstructor () {\n\t\tthis.options = {\n\t\t\tenabled: true,\n\t\t\ttime: {\n\t\t\t\tenabled: true,\n\t\t\t\tformat: 'YYYY-MM-DD HH:mm:ss'\n\t\t\t},\n\t\t\tlevels: {\n\t\t\t\tsuccess: {enabled: true, color: 'green'},\n\t\t\t\tinfo: {enabled: true, color: 'blue'},\n\t\t\t\twarn: {enabled: true, color: 'yellow'},\n\t\t\t\terror: {enabled: true, color: 'red'},\n\t\t\t\temergency: {enabled: true, color: 'redBright'},\n\t\t\t\tinspect: {enabled: true, color: 'blackBright'}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Merge options with default\n\t * @param  {Object} options\n\t */\n\tconfig(options) {\n\t\t_.merge(this.options, options);\n\t}\n\n\t/**\n\t * success logger\n\t * @param  {String} message\n\t */\n\tsuccess(message) {\n\t\tthis._output('success', message);\n\t}\n\n\t/**\n\t * info logger\n\t * @param  {String} message\n\t */\n\tinfo(message) {\n\t\tthis._output('info', message);\n\t}\n\n\t/**\n\t * warn logger\n\t * @param  {String} message\n\t */\n\twarn(message) {\n\t\tthis._output('warn', message);\n\t}\n\n\t/**\n\t * error logger\n\t * @param  {String} message\n\t */\n\terror(message) {\n\t\tthis._output('error', message);\n\t}\n\n\t/**\n\t * emergency logger\n\t * @param  {String} message\n\t */\n\temergency(message) {\n\t\tthis._output('emergency', message);\n\t}\n\n\tinspect(object, depth) {\n\t\tdepth = depth || null;\n\t\tthis._output('inspect', util.inspect(object, {depth: depth, colors: true}));\n\t}\n\n\n\t/**\n\t * progress logger\n\t * @param  {object} options \t\t[options for the progress bar]\n\t *         {string} options.title \t[title of the progress bar]\n\t *         {string} options.steps \t[total steps count]\n\t * @return {Object} Progress\n\t */\n\tprogress (options) {\n\t\tlet time = this.getTime();\n\t\treturn new Progress(time, options);\n\t}\n\n\t/**\n\t * Return the current time\n\t * @return {String}\n\t */\n\tgetTime() {\n\t\tlet now = moment().format(this.options.time.format);\n\t\treturn `[${clc.blackBright(now)}]`;\n\t}\n\n\t/**\n\t * Output the message\n\t * @param  {String} level\n\t * @param  {Mixte} message\n\t */\n\t_output(level, message) {\n\t\tif (this.options.enabled && this.options.levels[level].enabled) {\n\n\t\t\tlet output = '';\n\n\t\t\tif (this.options.time.enabled) {\n\t\t\t\toutput += this.getTime();\n\t\t\t}\n\n\t\t\tlet levelOut;\n\t\t\tswitch (level) {\n\t\t\t\tcase 'success' \t: levelOut = `[${level}  ]`; break;\n\t\t\t\tcase 'info' \t: levelOut = `[${level}     ]`; break;\n\t\t\t\tcase 'warn' \t: levelOut = `[warning  ]`; break;\n\t\t\t\tcase 'error' \t: levelOut = `[${level}    ]`; break;\n\t\t\t\tcase 'emergency': levelOut = `[${level}]`; break;\n\t\t\t\tcase 'inspect' \t: levelOut = `[${level}  ]`; break;\n\t\t\t}\n\n\t\t\tlevelOut = clc[this.options.levels[level].color](levelOut);\n\n\t\t\tif (_.isError(message)) {\n\t\t\t\tmessage = this._getErrorFormat(message);\n\t\t\t}\n\n\t\t\toutput += `${levelOut} ${message} \\n`;\n\n\t\t\tprocess.stdout.write(output);\n\t\t}\n\t}\n\n\t/**\n\t * Enhance error Message\n\t * @param  {Object} error\n\t * @return {String}\n\t */\n\t_getErrorFormat(error) {\n\t\tlet trace   \t\t= stackTrace.parse(error);\n\t\tlet message \t\t= clc.redBright(error.message);\n\t\tlet line    \t\t= clc.redBright(trace[0].getLineNumber());\n\t\tlet functionName \t= clc.magentaBright(trace[0].getFunctionName() || 'anonyme');\n\t\tlet fileName \t    = clc.magentaBright(trace[0].getFileName() || 'anonyme');\n\n\t\treturn `Error : ${message} at line : ${line}, function: ${functionName}, file: ${fileName}`;\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-snaplog/node_modules/snaplog/lib/progress.js":"'use strict';\n\nconst clc \t = require('cli-color');\nconst moment = require('moment');\nconst charm  = require('charm');\n\n/**\n * Build a progress bar in terminal\n * @type {class}\n */\nmodule.exports = class Progress {\n\n\t/**\n\t * Build a new Object\n\t * @param  {String} time    \t\t[headline that contain the time when the progress object was created]\n\t * @param  {object} options \t\t[options for the progress bar]\n\t *         {string} options.title \t[title of the progress bar]\n\t *         {string} options.steps \t[total steps count]\n\t * @return {function}         \t\t[write progress bar in stdout]\n\t */\n\tconstructor(time, options) {\n\t\tthis.firstWriting = true;\n\t\tthis.charm = charm();\n\t\tthis.charm.pipe(process.stdout);\n\n\t\tthis.columns = process.stdout.columns - 32;\n\t\tthis.indent = Array(33).join(' ');\n\t\tthis.headLine = time + clc.xterm(141)('[progress ] ') + options.title || 'Progression';\n\n\t\tthis.steps = options.steps;\n\t\tthis.state = 0;\n\n\t\tthis.startTime = new Date().getTime();\n\t\tthis.elapsedTime = clc.xterm(242)('0h 0m 0s');\n\n\t\tthis.timer = setInterval(()=>this.liveTime(), 1000);\n\n\t\tthis.description = '';\n\n\t\treturn this.writeLog();\n\t}\n\n\t/**\n\t * Update every second the time elapsed\n\t */\n\tliveTime() {\n\t\tthis.updateTime();\n\t\tthis.writeLog();\n\t}\n\n\t/**\n\t * Update the elapsed time\n\t */\n\tupdateTime() {\n\t\tlet now  = new Date().getTime();\n\t\tlet x    = now - this.startTime;\n\t\tlet time = moment.duration(x);\n\t\tthis.elapsedTime = clc.xterm(242)(time.hours() + 'h ') + clc.xterm(242)(time.minutes() + 'm ') + clc.xterm(242)(time.seconds() + 's');\n\t}\n\n\t/**\n\t * Call a next step\n\t * @param  {object} options [options for the next step]\n\t *         {Number} options.steps [optional - number of steps default is 1]\n\t *         {String} options.description [optional - description of the step]\n\t */\n\tnext(options) {\n\t\toptions = options || {};\n\t\tlet step = options.step || 1;\n\n\t\tthis.updateTime();\n\n\t\tif (options.description) {\n\t\t\tthis.description = options.description;\n\t\t}\n\n\t\tthis.state = this.state + step;\n\n\t\tif (this.state !== this.steps) {\n\t\t\tthis.writeLog();\n\t\t}\n\t\telse {\n\t\t\tthis.writeLog();\n\t\t\tclearInterval(this.timer);\n\t\t}\n\t}\n\n\t/**\n\t * Write the log in the stdout\n\t */\n\twriteLog() {\n\t\tlet output = this.buildOutputProgress();\n\n\t\tif (!this.firstWriting) {\n\t\t\tthis.charm.move(0, -1).erase('end');\n\t\t\tthis.charm.move(0, -1).erase('end');\n\t\t\tthis.charm.move(0, -1).erase('end');\n\t\t\tthis.charm.move(0, -1).erase('end');\n\t\t}\n\n\t\tthis.firstWriting = false;\n\n\t\tthis.charm.write(output);\n\t}\n\n\t/**\n\t * Build the progressbar output\n\t * @return {String}\n\t */\n\tbuildOutputProgress() {\n\t\tlet bar   \t\t= this.buildProgressBar();\n\t\tlet stats \t\t= this.buildProgressStats();\n\t\tlet description = this.buildProgressDescription();\n\n\t\treturn `${this.headLine}\\n${bar}\\n${stats}\\n${description}\\n`;\n\t}\n\n\t/**\n\t * Build the bar of the progress bar\n\t * @return {String}\n\t */\n\tbuildProgressBar() {\n\t\tlet completed = this.getProgressBarSize();\n\t\tlet bar \t  = this.columns - completed;\n\n\t\tcompleted = clc.bgXterm(41)(Array(completed).join(' '));\n\t\tbar = clc.bgXterm(247)(Array(bar).join(' '));\n\n\t\treturn `${this.indent} ${completed}${bar}`;\n\t}\n\n\t/**\n\t * Build progress bar's stats\n\t * @return {String}\n\t */\n\tbuildProgressStats() {\n\t\tlet percent   = 'progression : ' + clc.xterm(241)(Math.round((this.state / this.steps) * 100) + '%');\n\t\tlet completed = clc.bold('completed : ') + clc.xterm(241)(`${this.state}/${this.steps}`);\n\t\tlet time \t  = clc.bold('elapsed time : ') + `${this.elapsedTime}`;\n\n\t\treturn `${this.indent} ${percent} - ${completed} - ${time}`;\n\t}\n\n\t/**\n\t *   Build progress bar's description\n\t * @return {String}\n\t */\n\tbuildProgressDescription() {\n\t\treturn `${this.indent} description: ${clc.xterm(241)(this.description)}`;\n\t}\n\n\t/**\n\t * Calculate the bar size\n\t * @return {[type]} [description]\n\t */\n\tgetProgressBarSize() {\n\t\treturn Math.round((this.state * this.columns) / this.steps);\n\t}\n};\n"}